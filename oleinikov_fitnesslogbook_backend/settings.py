"""
Django settings for oleinikov_fitnesslogbook_backend project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import dj_database_url
from decouple import config

# Base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent

# Secret key management
SECRET_KEY = config('SECRET_KEY', default='your-default-secret-key')

# Debug mode, should be False in production
DEBUG = config('DEBUG', default=True, cast=bool)

# Allowed hosts, ensure to update for production
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')

# Installed applications
INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'graphene_django', 
    'graphql_jwt',
    'core',
]

# Middleware configuration
MIDDLEWARE = [
    "whitenoise.middleware.WhiteNoiseMiddleware", 
    'corsheaders.middleware.CorsMiddleware',  
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# GraphQL and JWT settings
GRAPHENE = {
    'SCHEMA': 'core.schema.schema',  # Path to your GraphQL schema
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ],
}

AUTHENTICATION_BACKENDS = [
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
]

GRAPHQL_JWT = {
    'JWT_EXPIRATION_DELTA': timedelta(hours=1),  # Token expiration time
    'JWT_ALLOW_ANY_CLASSES': [
        'core.mutations.CreateUser',    # allow open access to CreateUser
        'core.mutations.TokenAuth',     # allow open access to TokenAuth
    ],
}

# CORS and CSRF settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",  # Replace with your frontend's URL in production
]
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000'
]

CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS"
]

CORS_ALLOW_HEADERS = [
    "content-type",
    "authorization",
    "x-csrftoken",
    "x-requested-with"
]

# URL configuration
ROOT_URLCONF = 'oleinikov_fitnesslogbook_backend.urls'

# Templates configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI configuration
WSGI_APPLICATION = 'oleinikov_fitnesslogbook_backend.wsgi.application'

# Database configuration
DATABASES = {
    'default': dj_database_url.config(default=config('PG_DATABASE_URL'))
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]




# Internationalization settings
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files settings
STATIC_ROOT = BASE_DIR / "staticfiles"
# Add whitenoise static files configuration
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        # Define a console handler to print log messages to the console
        'console': {
            'level': 'DEBUG',  # Adjust to your desired logging level (DEBUG, INFO, etc.)
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        # You can also configure logging for your app specifically
        '__name__': {
            'handlers': ['console'],
            'level': 'DEBUG',  # Adjust to your desired logging level
            'propagate': True,
        },
    },
}